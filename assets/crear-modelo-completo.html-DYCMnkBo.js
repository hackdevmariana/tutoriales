import{_ as e,o as a,c as o,d as s}from"./app-DIYBqpfX.js";const r={},n=s(`<h1 id="crear-el-entorno-completo-del-modelo-en-laravel-con-all" tabindex="-1"><a class="header-anchor" href="#crear-el-entorno-completo-del-modelo-en-laravel-con-all"><span>Crear el entorno completo del modelo en Laravel con --all</span></a></h1><p>Para automatizar la creación del entorno completo a un modelo en Laravel, artisan tiene la opción --all.</p><p>Supongamos que queremos crear el modelo Colors, podemos usar el comando:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php artisan make:model Color <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>El comando <code>php artisan make:model Color --all</code> crea un modelo llamado Color y genera automáticamente otros componentes como controladores, migraciones, y más.</p><p>En cuanto al nombre, <code>Color</code> es más adecuado para el modelo que <code>Colors</code>. En Laravel, los nombres de los modelos suelen ser en singular para representar una única instancia de la entidad. Por ejemplo, un modelo <code>Color</code> representaría un solo color, mientras que la tabla en la base de datos se llamaría <code>colors</code> para almacenar múltiples registros de colores.</p><p>Este comando nos generaría los siguientes ficheros:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO  Model [app/Models/Color.php] created successfully.  

INFO  Factory [database/factories/ColorFactory.php] created successfully.  

INFO  Migration [database/migrations/2024_08_28_230243_create_colors_table.php] created successfully.  

INFO  Seeder [database/seeders/ColorSeeder.php] created successfully.  

INFO  Request [app/Http/Requests/StoreColorRequest.php] created successfully.  

INFO  Request [app/Http/Requests/UpdateColorRequest.php] created successfully.  

INFO  Controller [app/Http/Controllers/ColorController.php] created successfully.  

INFO  Policy [app/Policies/ColorPolicy.php] created successfully.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Veamos qué es cada uno de ellos:</p><p><strong>Model</strong></p><p>Un <code>Model</code> en Laravel representa una tabla en la base de datos y proporciona una interfaz para interactuar con los datos de esa tabla. Los modelos permiten realizar operaciones como crear, leer, actualizar y eliminar registros de manera sencilla utilizando Eloquent ORM (Object-Relational Mapping).</p><p><strong>Factory</strong></p><p>Una <code>Factory</code> en Laravel es una herramienta para generar grandes cantidades de registros de base de datos para pruebas o para poblar la base de datos con datos iniciales. Las factories permiten definir un conjunto de atributos predeterminados para un modelo y crear múltiples instancias de ese modelo de manera rápida.</p><p><strong>Migration</strong></p><p>Las <code>Migrations</code> son como el control de versiones para tu base de datos. Permiten definir y modificar la estructura de las tablas de la base de datos utilizando código. Esto facilita la gestión y el seguimiento de los cambios en el esquema de la base de datos a lo largo del tiempo.</p><p><strong>Seeder</strong></p><p>Un <code>Seeder</code> en Laravel es una clase que se utiliza para insertar datos en la base de datos. Los seeders son útiles para poblar la base de datos con datos iniciales o de prueba, y se pueden ejecutar de manera individual o en conjunto.</p><p><strong>Request</strong></p><p>El <code>Request</code> en Laravel es un objeto que encapsula la solicitud HTTP entrante. Proporciona una interfaz para acceder a los datos enviados por el cliente, como parámetros de URL, datos de formularios, cookies y archivos subidos. Esto facilita la manipulación y validación de las entradas del usuario.</p><p><strong>Controller</strong></p><p>Un <code>Controller</code> en Laravel es una clase que agrupa la lógica de manejo de solicitudes relacionadas. En lugar de definir toda la lógica en los archivos de rutas, los controladores permiten organizar el comportamiento de las solicitudes en métodos separados, mejorando la estructura y mantenibilidad del código.</p><p><strong>Policy</strong></p><p>Una <code>Policy</code> en Laravel es una clase que organiza la lógica de autorización alrededor de un modelo o recurso específico. Las policies permiten definir reglas de autorización para controlar el acceso a acciones dentro de la aplicación, facilitando la gestión y comprensión de las reglas de autorización.</p><h2 id="borrar-elementos" tabindex="-1"><a class="header-anchor" href="#borrar-elementos"><span>Borrar elementos</span></a></h2><p>Puede ser que no necesitemos todos estos elementos y queramos borrar alguno.</p><p>Laravel no tiene un comando específico para borrar factories, controllers, requests, seeders... Por lo tanto, para eliminar uno de estos archivos, hay que hacerlo manualmente con <code>rm</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> database/factories/NombreDelFactory.php
<span class="token function">rm</span> app/Http/Controllers/NombreDelControlador.php
<span class="token function">rm</span> app/Http/Requests/NombreDelRequest.php
<span class="token function">rm</span> database/seeders/NombreDelSeeder.php

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="seeders-y-factories" tabindex="-1"><a class="header-anchor" href="#seeders-y-factories"><span>Seeders y Factories</span></a></h2><p>En Laravel, tanto los <code>Factories</code> como los <code>Seeders</code> se utilizan para poblar la base de datos con datos de prueba, pero tienen propósitos y usos diferentes:</p><p><strong>Factories</strong></p><p>• Propósito: Generar datos de prueba en tiempo de ejecución.</p><p>• Tipo de datos: Datos aleatorios y dinámicos.</p><p>• Uso principal: Crear instancias de modelos con atributos predeterminados para pruebas y desarrollo.</p><p>• Ejemplo: Podemos usar una <code>factory</code> para crear múltiples usuarios con datos aleatorios para probar cómo se comporta la aplicación con diferentes entradas.</p><p><strong>Seeders</strong></p><p>• Propósito: Poblar la base de datos con datos iniciales o de prueba.</p><p>• Tipo de datos: Datos fijos y predefinidos.</p><p>• Uso principal: Insertar datos específicos en la base de datos, como roles de usuario, categorías de productos, etc.</p><p>• Ejemplo: Podemos usar un <code>seeder</code> para insertar roles de usuario como &quot;admin&quot;, &quot;editor&quot; y &quot;usuario&quot; en la tabla de roles.</p><p><strong>Uso combinado</strong></p><p>A menudo, los <code>seeders</code> utilizan <code>factories</code> para generar datos de prueba de manera más eficiente. Por ejemplo, un seeder puede llamar a una factory para crear 50 usuarios con datos aleatorios.</p>`,41),l=[n];function d(t,i){return a(),o("div",null,l)}const p=e(r,[["render",d],["__file","crear-modelo-completo.html.vue"]]),u=JSON.parse('{"path":"/laravel/crear-modelo-completo.html","title":"Crear el entorno completo del modelo en Laravel con --all","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Borrar elementos","slug":"borrar-elementos","link":"#borrar-elementos","children":[]},{"level":2,"title":"Seeders y Factories","slug":"seeders-y-factories","link":"#seeders-y-factories","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"laravel/crear-modelo-completo.md"}');export{p as comp,u as data};

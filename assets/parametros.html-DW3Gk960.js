import{_ as a,o as n,c as s,d as e}from"./app-CsGgdE0p.js";const o={},t=e(`<h1 id="uso-de-parametros-en-las-funciones-python" tabindex="-1"><a class="header-anchor" href="#uso-de-parametros-en-las-funciones-python"><span>Uso de parámetros en las funciones Python</span></a></h1><p>En Python, los parámetros en las funciones son las variables que se utilizan para recibir valores durante la llamada a la función.</p><p>Hay varios tipos de parámetros que podemos utilizar en la definición de una función.</p><h2 id="parametros-posicionales" tabindex="-1"><a class="header-anchor" href="#parametros-posicionales"><span>Parámetros posicionales</span></a></h2><p>Los parámetros posicionales son los más comunes. Se definen en el orden en que aparecen en la función y se deben proporcionar en el mismo orden durante la llamada a la función.</p><p>Llamada a una función con parámetros posicionales:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">saludar</span><span class="token punctuation">(</span>nombre<span class="token punctuation">,</span> saludo<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>saludo<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>nombre<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>

saludar<span class="token punctuation">(</span><span class="token string">&quot;Juan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hola&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parametros-de-palabra-clave-keyword" tabindex="-1"><a class="header-anchor" href="#parametros-de-palabra-clave-keyword"><span>Parámetros de palabra clave (Keyword)</span></a></h2><p>Los parámetros de palabra clave se especifican durante la llamada a la función utilizando la sintaxis <code>nombre=valor</code>.</p><p>Esto permite cambiar el orden de los argumentos sin afectar la función.</p><p>Llamada a una función con parámetros de palabra clave:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">saludar</span><span class="token punctuation">(</span>nombre<span class="token punctuation">,</span> saludo<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>saludo<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>nombre<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>

saludar<span class="token punctuation">(</span>saludo<span class="token operator">=</span><span class="token string">&quot;Hola&quot;</span><span class="token punctuation">,</span> nombre<span class="token operator">=</span><span class="token string">&quot;Juan&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parametros-por-defecto" tabindex="-1"><a class="header-anchor" href="#parametros-por-defecto"><span>Parámetros por defecto</span></a></h2><p>Podemos asignar valores predeterminados a los parámetros en la definición de la función.</p><p>Estos valores se utilizan si no se proporciona un valor durante la llamada.</p><p>Llamada a una función sin proporcionar el segundo argumento:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">saludar</span><span class="token punctuation">(</span>nombre<span class="token punctuation">,</span> saludo<span class="token operator">=</span><span class="token string">&quot;Hola&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>saludo<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>nombre<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>

saludar<span class="token punctuation">(</span><span class="token string">&quot;Juan&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="desempaquetado-de-argumentos" tabindex="-1"><a class="header-anchor" href="#desempaquetado-de-argumentos"><span>Desempaquetado de argumentos</span></a></h2><p>Podemos desempaquetar secuencias (listas, tuplas) o diccionarios durante la llamada a la función utilizando <code>*</code> y <code>**</code>.</p><p>Desempaquetado de una lista:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">funcion_desempaquetado</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Cuerpo de la función</span>

lista_argumentos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
funcion_desempaquetado<span class="token punctuation">(</span><span class="token operator">*</span>lista_argumentos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Desempaquetado de un diccionario:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">funcion_desempaquetado</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Cuerpo de la función</span>

diccionario_argumentos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
funcion_desempaquetado<span class="token punctuation">(</span><span class="token operator">**</span>diccionario_argumentos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indicar-el-tipo-de-dato-que-recibe-una-funcion" tabindex="-1"><a class="header-anchor" href="#indicar-el-tipo-de-dato-que-recibe-una-funcion"><span>Indicar el tipo de dato que recibe una función</span></a></h2><p>En Python, los tipos de las variables de los parámetros no se especifican directamente en la definición de la función, al estilo de lenguajes estáticamente tipados como C++ o Java.</p><p>Python es un lenguaje de tipado dinámico, lo que significa que no es necesario declarar el tipo de una variable antes de usarla.</p><p>Sin embargo, a partir de la versión 3.5, Python introdujo las &quot;annotations&quot; (anotaciones), que permiten añadir información opcional sobre los tipos de los parámetros y el valor de retorno de una función.</p><p>Las anotaciones de tipo se especifican utilizando dos puntos (<code>:</code>) después del nombre del parámetro o de la función, seguido del tipo.</p><p>Aquí hay un ejemplo básico:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">suma</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uso-de-un-numero-variable-de-argumentos-en-una-funcion" tabindex="-1"><a class="header-anchor" href="#uso-de-un-numero-variable-de-argumentos-en-una-funcion"><span>Uso de un número variable de argumentos en una función</span></a></h2><p>En Python, <code>*args</code> y <code>**kwargs</code> son convenciones utilizadas para pasar un número variable de argumentos a una función. Esto proporciona flexibilidad y versatilidad al definir funciones que pueden aceptar diferentes cantidades de argumentos.</p><h2 id="uso-de-args-argumentos-posicionales" tabindex="-1"><a class="header-anchor" href="#uso-de-args-argumentos-posicionales"><span>Uso de *args (Argumentos posicionales)</span></a></h2><p>El uso de <code>*args</code> en la definición de una función permite que la función acepte un número arbitrario de argumentos posicionales.</p><p>La palabra &quot;args&quot; es solo una convención; podemos usar cualquier nombre, pero <code>args</code> es común y entendido por la comunidad.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ejemplo_args</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>

ejemplo_args<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;cuatro&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En este ejemplo, <code>*args</code> recoge todos los argumentos posicionales proporcionados a la función y los almacena en una tupla llamada <code>args</code>. La función puede iterar sobre esta tupla y realizar operaciones según sea necesario.</p><h2 id="kwargs-argumentos-de-palabra-clave" tabindex="-1"><a class="header-anchor" href="#kwargs-argumentos-de-palabra-clave"><span>**kwargs (Argumentos de palabra clave)</span></a></h2><p>Similar a <code>*args</code>, <code>**kwargs</code> se utiliza para aceptar un número variable de argumentos, pero en este caso, se trata de argumentos de palabra clave.</p><p>Al igual que con <code>*args</code>, <code>&quot;kwargs&quot;</code> es una convención, y podemos usar cualquier otro nombre.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ejemplo_kwargs</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> clave<span class="token punctuation">,</span> valor <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>clave<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>valor<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

ejemplo_kwargs<span class="token punctuation">(</span>nombre<span class="token operator">=</span><span class="token string">&quot;Juan&quot;</span><span class="token punctuation">,</span> edad<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> ciudad<span class="token operator">=</span><span class="token string">&quot;Ciudad de Ejemplo&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En este ejemplo, <code>**kwargs</code> recoge todos los argumentos de palabra clave proporcionados a la función y los almacena en un diccionario llamado kwargs.</p><p>La función puede trabajar con este diccionario como desee.</p><h2 id="parametros-en-la-definicion-de-funciones" tabindex="-1"><a class="header-anchor" href="#parametros-en-la-definicion-de-funciones"><span>Parámetros en la definición de funciones</span></a></h2><p>Cuando definimos una función, podemos utilizar parámetros posicionales, parámetros de palabra clave y combinaciones de ambos:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">funcion_ejemplo</span><span class="token punctuation">(</span>parametro_posicional<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> parametro_keyword<span class="token operator">=</span><span class="token string">&quot;valor_por_defecto&quot;</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>parametro_posicional: Es un parámetro que debe ser proporcionado en la llamada a la función.</p></li><li><p><code>*args</code>: Recoge argumentos posicionales adicionales en una tupla.</p></li><li><p>parametro_keyword: Es un parámetro de palabra clave con un valor predeterminado.</p></li><li><p><code>**kwargs</code>: Recoge argumentos de palabra clave adicionales en un diccionario.</p></li></ul><h2 id="llamadas-a-funciones-con-args-y-kwargs" tabindex="-1"><a class="header-anchor" href="#llamadas-a-funciones-con-args-y-kwargs"><span>Llamadas a Funciones con <code>*args</code> y <code>**kwargs</code></span></a></h2><p>Cuando llamamos a una función, podemos utilizar <code>*</code> y <code>**</code> para desempaquetar secuencias (tuplas o diccionarios) y pasar los elementos como argumentos individuales.</p><p>Llamada a la función con <code>*args</code> y <code>**kwargs</code>:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">funcion_ejemplo</span><span class="token punctuation">(</span>parametro_posicional<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> parametro_keyword<span class="token operator">=</span><span class="token string">&quot;valor_por_defecto&quot;</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

funcion_ejemplo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> parametro_keyword<span class="token operator">=</span><span class="token string">&quot;nuevo_valor&quot;</span><span class="token punctuation">,</span> nombre<span class="token operator">=</span><span class="token string">&quot;Juan&quot;</span><span class="token punctuation">,</span> edad<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En este ejemplo, <code>args</code> recoge los valores 2 y 3 como una tupla, y kwargs recoge los valores <code>nombre=&quot;Juan&quot;</code> y <code>edad=25</code> como un diccionario.</p><p>La función puede manejar estos valores de manera flexible.</p><p>Estas características son especialmente útiles cuando necesitas diseñar funciones que pueden adaptarse a diferentes situaciones y permitir un código más dinámico y reutilizable.</p>`,54),p=[t];function i(c,l){return n(),s("div",null,p)}const u=a(o,[["render",i],["__file","parametros.html.vue"]]),d=JSON.parse('{"path":"/python/parametros.html","title":"Uso de parámetros en las funciones Python","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Parámetros posicionales","slug":"parametros-posicionales","link":"#parametros-posicionales","children":[]},{"level":2,"title":"Parámetros de palabra clave (Keyword)","slug":"parametros-de-palabra-clave-keyword","link":"#parametros-de-palabra-clave-keyword","children":[]},{"level":2,"title":"Parámetros por defecto","slug":"parametros-por-defecto","link":"#parametros-por-defecto","children":[]},{"level":2,"title":"Desempaquetado de argumentos","slug":"desempaquetado-de-argumentos","link":"#desempaquetado-de-argumentos","children":[]},{"level":2,"title":"Indicar el tipo de dato que recibe una función","slug":"indicar-el-tipo-de-dato-que-recibe-una-funcion","link":"#indicar-el-tipo-de-dato-que-recibe-una-funcion","children":[]},{"level":2,"title":"Uso de un número variable de argumentos en una función","slug":"uso-de-un-numero-variable-de-argumentos-en-una-funcion","link":"#uso-de-un-numero-variable-de-argumentos-en-una-funcion","children":[]},{"level":2,"title":"Uso de *args (Argumentos posicionales)","slug":"uso-de-args-argumentos-posicionales","link":"#uso-de-args-argumentos-posicionales","children":[]},{"level":2,"title":"**kwargs (Argumentos de palabra clave)","slug":"kwargs-argumentos-de-palabra-clave","link":"#kwargs-argumentos-de-palabra-clave","children":[]},{"level":2,"title":"Parámetros en la definición de funciones","slug":"parametros-en-la-definicion-de-funciones","link":"#parametros-en-la-definicion-de-funciones","children":[]},{"level":2,"title":"Llamadas a Funciones con *args y **kwargs","slug":"llamadas-a-funciones-con-args-y-kwargs","link":"#llamadas-a-funciones-con-args-y-kwargs","children":[]}],"git":{"updatedTime":1709938789000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"python/parametros.md"}');export{u as comp,d as data};

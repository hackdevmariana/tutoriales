import{_ as a,o as n,c as e,d as s}from"./app-B-PLYSG4.js";const o={},c=s(`<h1 id="aplicar-funciones" tabindex="-1"><a class="header-anchor" href="#aplicar-funciones"><span>Aplicar funciones</span></a></h1><p>Podemos aplicar funciones a todos los elementos de un conjunto. Lo podemos hacer con o sin <code>for</code>.</p><h2 id="con-bucle-for" tabindex="-1"><a class="header-anchor" href="#con-bucle-for"><span>Con bucle for</span></a></h2><p>Podemos usar un bucle <code>for</code> en R para aplicar una función a cada elemento de un vector de la siguiente manera:</p><p>Creamos el vector:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>mi_vector <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Definimos una función que queranmos aplicar:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>mi_funcion <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  return<span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># Por ejemplo, elevar al cuadrado</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creamos un vector para almacenar los resultados:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>resultados <span class="token operator">&lt;-</span> numeric<span class="token punctuation">(</span>length<span class="token punctuation">(</span>mi_vector<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Usamos un bucle <code>for</code> para aplicar la función a cada elemento:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> seq_along<span class="token punctuation">(</span>mi_vector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  resultados<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;-</span> mi_funcion<span class="token punctuation">(</span>mi_vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mostramos los resultados:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>print<span class="token punctuation">(</span>resultados<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Este script define primero un vector <code>mi_vector</code> y una función <code>mi_funcion</code> que se aplicará a cada elemento del vector. Luego, se inicializa un vector resultados para almacenar los resultados de la función. El bucle <code>for</code> itera sobre los índices del vector, aplicando la función a cada elemento y almacenando el resultado en el vector <code>resultados</code>. Finalmente, se imprimen los resultados.</p><p>Recuerdemos que R es un lenguaje vectorizado, por lo que muchas veces podemos aplicar una función directamente a un vector sin necesidad de un bucle for, lo cual es más eficiente.</p><p>Por ejemplo, si la función es vectorizada (como la mayoría de las funciones básicas de R), podríamos simplemente hacer:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>resultados <span class="token operator">&lt;-</span> mi_funcion<span class="token punctuation">(</span>mi_vector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Esto aplicará <code>mi_funcion</code> a cada elemento de <code>mi_vector</code> y devolverá un vector <code>resultados</code>.</p><h2 id="sin-for" tabindex="-1"><a class="header-anchor" href="#sin-for"><span>Sin for</span></a></h2><p>Podemos aplicar una función personalizada a todos los elementos de un vector en R sin usar bucles <code>for</code> utilizando funciones vectorizadas.</p><p>Las funciones vectorizadas son aquellas que pueden tomar un vector como entrada y operar en cada elemento del vector sin necesidad de escribir explícitamente un bucle.</p><p>Un ejemplo utilizando la función <code>sapply</code>:</p><p>Definir un vector:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>mi_vector <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Definir una función que queramos aplicar:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>mi_funcion <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  return<span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># Por ejemplo, elevar al cuadrado</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aplicar la función a cada elemento del vector con <code>sapply</code>:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>resultados <span class="token operator">&lt;-</span> sapply<span class="token punctuation">(</span>mi_vector<span class="token punctuation">,</span> mi_funcion<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mostrar los resultados:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>print<span class="token punctuation">(</span>resultados<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En este ejemplo, <code>sapply</code> toma <code>mi_vector</code> y aplica <code>mi_funcion</code> a cada uno de sus elementos. El resultado es un nuevo vector resultados que contiene el cuadrado de cada número en <code>mi_vector</code>.</p><p>Otras funciones que también podemos usar para aplicar funciones a vectores incluyen <code>lapply</code>, <code>vapply</code>, y <code>apply</code> para matrices o arrays de dimensiones superiores.</p><p>Además, muchas funciones en R son inherentemente vectorizadas, lo que significa que podemos pasar un vector directamente a la función sin necesidad de un bucle.</p><p>Por ejemplo, para elevar al cuadrado cada elemento del vector directamente:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>resultados <span class="token operator">&lt;-</span> mi_vector<span class="token operator">^</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Este código elevará al cuadrado cada elemento de <code>mi_vector</code> sin necesidad de una función adicional o un bucle for.</p>`,37),t=[c];function i(l,r){return n(),e("div",null,t)}const u=a(o,[["render",i],["__file","aplicar-funciones.html.vue"]]),d=JSON.parse('{"path":"/r/aplicar-funciones.html","title":"Aplicar funciones","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Con bucle for","slug":"con-bucle-for","link":"#con-bucle-for","children":[]},{"level":2,"title":"Sin for","slug":"sin-for","link":"#sin-for","children":[]}],"git":{"updatedTime":1715763058000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"r/aplicar-funciones.md"}');export{u as comp,d as data};

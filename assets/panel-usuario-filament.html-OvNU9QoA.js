import{_ as s,r as t,o,c as p,a,e as n,b as i,d as r}from"./app-Bjdq2l2Z.js";const l={},c=a("h1",{id:"como-crear-paneles-personalizados-para-usuarios-de-filamentphp",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#como-crear-paneles-personalizados-para-usuarios-de-filamentphp"},[a("span",null,"Cómo crear paneles personalizados para usuarios de FilamentPHP")])],-1),d={href:"https://filamentphp.com/docs/3.x/panels/getting-started",target:"_blank",rel:"noopener noreferrer"},u=r(`<p>Para crear paneles personalizados, por ejemplo, para editar artículos, podemos usar el comando:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>php artisan make<span class="token punctuation">:</span>filament<span class="token operator">-</span>panel editor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Que nos devuelve un mensaje de aviso:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>WARN  We&#39;ve attempted to register the EditorPanelProvider in your [config/app.php] file as a service provider. If you get an error while trying to access your panel then this process has probably failed. You can manually register the service provider by adding it to the [providers] array.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Algo así como:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ADVERTENCIA Hemos intentado registrar EditorPanelProvider en su archivo [config/app.php] como proveedor de servicios. Si recibe un error al intentar acceder a su panel, es probable que este proceso haya fallado. Puede registrar manualmente el proveedor de servicios agregándolo a la matriz [proveedores].
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Así que comprobamos en <code>config/app.php</code> si lo ha agregado bien con la línea:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>Filament<span class="token punctuation">\\</span>EditorPanelProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Y si existe el fichero <code>app/Providers/Filament/EditorPanelProvider.php</code>.</p><p>Si todo esto existe, deberemos añadir en ese fichero, para poder acceder al panel <code>-&gt;login()</code> en la zona de <code>return $panel</code>. Si queremos que este sea el panel por defecto, lo indicaremos con <code>-&gt;default()</code>.</p><p>Para limpiar los widgets que aparecen en la página por defecto, podemos hacerlo en el apartado widgets, borrando o comentando el código:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token operator">-&gt;</span><span class="token function">widgets</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// Widgets\\AccountWidget::class,</span>
    <span class="token comment">// Widgets\\FilamentInfoWidget::class,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En los resources, cuando queramos que el panel muestre sólo la información referida a ese usuario, usaremos:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getEloquentQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Builder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">getEloquentQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para autorrellenar datos requeridos en un modelo, pero que el usuario no tiene por qué rellenarlos, ya que son referentes a sí mismo, como el autor de un artículo, podemo usar en <code>CreateArticle.php</code>:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">mutateFormDataBeforeCreate</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
<span class="token punctuation">{</span>
    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La función <code>mutateFormDataBeforeCreate</code> permite añadir nuevos campos antes de enviar a la base de datos.</p><p>Para que, al crear un registro vaya al listado de datos, escribiremos en el recurso:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getRedirectUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function m(k,v){const e=t("ExternalLinkIcon");return o(),p("div",null,[c,a("p",null,[n("Documentación: "),a("a",d,[n("https://filamentphp.com/docs/3.x/panels/getting-started"),i(e)])]),u])}const h=s(l,[["render",m],["__file","panel-usuario-filament.html.vue"]]),f=JSON.parse('{"path":"/laravel/panel-usuario-filament.html","title":"Cómo crear paneles personalizados para usuarios de FilamentPHP","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1714899027000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"laravel/panel-usuario-filament.md"}');export{h as comp,f as data};

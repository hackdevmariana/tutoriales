import{_ as a,o as e,c as s,d as n}from"./app-DC8Wjq0Y.js";const i={},l=n(`<h1 id="eliminar-lineas-repetidas-en-un-fichero-de-texto" tabindex="-1"><a class="header-anchor" href="#eliminar-lineas-repetidas-en-un-fichero-de-texto"><span>Eliminar líneas repetidas en un fichero de texto</span></a></h1><p>Hay distintas posibilidades para eliminar líneas duplicadas de un fichero en Linux.</p><p>La más sencilla sería usando <code>sort</code> y <code>uniq</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sort</span> archivo.txt <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">&gt;</span> archivo_sin_duplicados.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Esta combinación de comandos ordena las líneas del archivo con <code>sort</code> y luego elimina las duplicadas con <code>uniq</code>.</p><p>Si queremos mantener el orden de las líneas, podemos usar <code>awk</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;!visto[$0]++&#39;</span> archivo.txt <span class="token operator">&gt;</span> archivo_sin_duplicados.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Este comando utiliza un array para rastrear las líneas ya vistas y solo imprime las líneas únicas.</p><p>También podemos usar <code>sed</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;$!N; /^\\(.*\\)\\n\\1$/!P; D&#39;</span> archivo.txt <span class="token operator">&gt;</span> archivo_sin_duplicados.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Este comando es un poco más complejo, pero también puede eliminar líneas duplicada y mantiene las líneas en su orden original.</p><h3 id="convertir-a-minusculas-y-eliminar-lineas-duplicadas" tabindex="-1"><a class="header-anchor" href="#convertir-a-minusculas-y-eliminar-lineas-duplicadas"><span>Convertir a minúsculas y eliminar líneas duplicadas</span></a></h3><p>Puede darse el caso que en un mismo fichero tengamos la misma línea con distintas combinaciones de minúsculas y mayúsculas. Si queremos que una combinación de caracteres no se repita aunque esté en el fichero original con distintas combinaciones entre mayúsculas y minúsculas, podemos convertir primero a minúsculas todos los caracteres y luego filtrar para eliminar los duplicados.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> raw_file.txt <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;[:upper:]&#39;</span> <span class="token string">&#39;[:lower:]&#39;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">&gt;</span> clear_file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),o=[l];function t(r,c){return e(),s("div",null,o)}const p=a(i,[["render",t],["__file","eliminar-lineas-repetidas.html.vue"]]),u=JSON.parse('{"path":"/linux/eliminar-lineas-repetidas.html","title":"Eliminar líneas repetidas en un fichero de texto","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Convertir a minúsculas y eliminar líneas duplicadas","slug":"convertir-a-minusculas-y-eliminar-lineas-duplicadas","link":"#convertir-a-minusculas-y-eliminar-lineas-duplicadas","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"linux/eliminar-lineas-repetidas.md"}');export{p as comp,u as data};

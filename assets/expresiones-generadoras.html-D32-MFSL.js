import{_ as e,o as n,c as a,d as s}from"./app-VK9RvX41.js";const o={},t=s(`<h1 id="expresiones-generadoras-en-python" tabindex="-1"><a class="header-anchor" href="#expresiones-generadoras-en-python"><span>Expresiones generadoras en Python</span></a></h1><p>Las expresiones generadoras son una herramienta de Python que permite crear iteradores de una manera eficiente y concisa.</p><p>Son similares a las comprensiones de listas, pero en lugar de construir una lista completa, generan los elementos uno por uno, lo cual es más eficiente en términos de memoria.</p><p>Algunos puntos clave sobre las expresiones generadoras son:</p><ul><li><p><strong>Eficiencia de memoria</strong>: Como las expresiones generadoras no construyen una lista completa en memoria, son especialmente útiles cuando trabajamos con secuencias grandes de datos y queremos mantener un bajo uso de memoria.</p></li><li><p><strong>Lazy evaluation</strong>: Las expresiones generadoras utilizan la evaluación perezosa (<em>lazy evaluation</em>), lo que significa que generan el siguiente valor sólo cuando se necesita. Esto es útil para secuencias infinitas o para secuencias donde sólo necesitamos procesar parte de los elementos.</p></li><li><p><strong>Sintaxis</strong>: Se escriben como una comprensión de lista, pero con paréntesis en lugar de corchetes.</p></li></ul><p>Por ejemplo:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>Uso con funciones</strong>: Podemos pasar una expresión generadora directamente a una función que toma un iterable.</li></ul><p>Por ejemplo:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>calcularía la suma de los cuadrados de los números del 0 al 9.</p><ul><li><strong>Conversión a listas</strong>: Si necesitamos una lista completa, podemos convertir una expresión generadora en una lista simplemente pasándola a la función <code>list()</code>.</li></ul><p>Por ejemplo:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>daría la lista de los cuadrados.</p>`,15),r=[t];function i(p,l){return n(),a("div",null,r)}const d=e(o,[["render",i],["__file","expresiones-generadoras.html.vue"]]),u=JSON.parse('{"path":"/python/expresiones-generadoras.html","title":"Expresiones generadoras en Python","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1710814847000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"python/expresiones-generadoras.md"}');export{d as comp,u as data};

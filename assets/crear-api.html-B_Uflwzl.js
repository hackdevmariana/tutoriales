import{_ as r,r as l,o,c as t,a,e,b as s,d as i}from"./app-C8plt4gS.js";const d={},c=i(`<h1 id="crear-una-api-publica-con-laravel-y-utilizar-un-dashboard-de-filamentphp-para-cargar-los-datos" tabindex="-1"><a class="header-anchor" href="#crear-una-api-publica-con-laravel-y-utilizar-un-dashboard-de-filamentphp-para-cargar-los-datos"><span>Crear una API pública con Laravel y utilizar un dashboard de FilamentPHP para cargar los datos</span></a></h1><p>Para crear una API pública con Laravel y utilizar un dashboard de <code>FilamentPHP</code> para cargar los datos, podemos los siguientes pasos generales, adaptándolos a las necesidades concretas de cada proyecto:</p><h2 id="instalacion-y-configuracion-inicial" tabindex="-1"><a class="header-anchor" href="#instalacion-y-configuracion-inicial"><span>Instalación y configuración inicial</span></a></h2><p>Instalar Laravel a través de Composer con el comando:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">composer</span> create-project laravel/laravel nombre-proyecto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Comprobamos que tenemos intl activado:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> intl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Si no devuelve nada, lo activamos:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-intl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Una vez instalado, al ejecutar:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> intl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Debería devolver algo así como:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>intl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="instalacion-de-filamentphp" tabindex="-1"><a class="header-anchor" href="#instalacion-de-filamentphp"><span>Instalación de FilamentPHP</span></a></h3><p>Instalar FilamentPHP con Composer usando <code>composer require filament/filament</code> seguido de la versión a instalar en el directorio del proyecto Laravel:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> nombre-proyecto

<span class="token function">composer</span> require filament/filament:<span class="token string">&quot;^3.2&quot;</span> <span class="token parameter variable">-W</span>

php artisan filament:install <span class="token parameter variable">--panels</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),p={href:"https://filamentphp.com/docs/3.x/panels/installation",target:"_blank",rel:"noopener noreferrer"},u=i(`<h3 id="configuracion" tabindex="-1"><a class="header-anchor" href="#configuracion"><span>Configuración</span></a></h3><p>Configurar el entorno de desarrollo en <code>.env</code> con las credenciales de la base de datos y otros ajustes necesarios.</p><p>Para cambiar el nombre de la base de datos, iremos a la línea:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DB_DATABASE=libertapi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Y realizamos las migraciones:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creamos el usuario del panel de control:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php artisan make:filament-user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ejecutar-el-servidor-de-desarrollo" tabindex="-1"><a class="header-anchor" href="#ejecutar-el-servidor-de-desarrollo"><span>Ejecutar el servidor de desarrollo</span></a></h3><p>Para comprobar que todo ha funcionado bien, podemos lanzar el servidor de desarrollo con:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php artisan serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Que, por defecto, nos lanzará un servidor de desarrollo en:</p>`,12),h={href:"http://127.0.0.1:8000/",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,"Y el acceso al panel de control a través de:",-1),v={href:"http://127.0.0.1:8000/admin/login",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="estructura-de-directorios" tabindex="-1"><a class="header-anchor" href="#estructura-de-directorios"><span>Estructura de directorios</span></a></h2><p>Mantener la estructura de directorios predeterminada de Laravel para las APIs.</p><p>Dentro de <code>app/Http/Controllers</code>, crear una carpeta <code>api</code> para almacenar los controladores específicos de la API.</p><p>Utilizar las migraciones en <code>database/migrations</code> para definir la estructura de la base de datos.</p><h2 id="autenticacion" tabindex="-1"><a class="header-anchor" href="#autenticacion"><span>Autenticación</span></a></h2><p>Si la API requiere autenticación, considerar usar <code>Laravel Sanctum </code>o <code>Passport</code> para manejar tokens de acceso.</p><h2 id="rutas-y-controladores" tabindex="-1"><a class="header-anchor" href="#rutas-y-controladores"><span>Rutas y controladores</span></a></h2><p>Definir las rutas de la API en <code>routes/api.php</code>.</p><p>Crear controladores que extiendan de <code>Controller</code> y usarlos para manejar las peticiones de la API.</p><h2 id="paquetes-adicionales" tabindex="-1"><a class="header-anchor" href="#paquetes-adicionales"><span>Paquetes adicionales</span></a></h2><p>Instalar paquetes útiles como <code>laravel/telescope</code> para depuración y <code>spatie/laravel-query-builder</code> para facilitar la creación de consultas API.</p><h2 id="pruebas-y-documentacion" tabindex="-1"><a class="header-anchor" href="#pruebas-y-documentacion"><span>Pruebas y documentación</span></a></h2><p>Escribir pruebas con <code>PHPUnit</code> para asegurar que la API funciona correctamente.</p><p>Documentar la API con herramientas como Swagger o Postman.</p><h2 id="despliegue" tabindex="-1"><a class="header-anchor" href="#despliegue"><span>Despliegue</span></a></h2><p>Preparar la aplicación para producción con:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>php artisan optimize
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Desplegar la aplicación en un servidor o plataforma de hosting que soporte Laravel.</p><h2 id="seguridad-y-mantenimiento" tabindex="-1"><a class="header-anchor" href="#seguridad-y-mantenimiento"><span>Seguridad y mantenimiento</span></a></h2><p>Asegurarse de que la API esté protegida contra ataques comunes.</p><p>Mantener actualizados Laravel y todos los paquetes.</p>`,21);function g(f,P){const n=l("ExternalLinkIcon");return o(),t("div",null,[c,a("p",null,[e("Para comprobar la última versión disponible, podemos ir a la "),a("a",p,[e("documentación de FilamentPHP"),s(n)]),e(".")]),u,a("p",null,[a("a",h,[e("http://127.0.0.1:8000/"),s(n)])]),m,a("p",null,[a("a",v,[e("http://127.0.0.1:8000/admin/login"),s(n)])]),b])}const k=r(d,[["render",g],["__file","crear-api.html.vue"]]),x=JSON.parse('{"path":"/laravel/crear-api.html","title":"Crear una API pública con Laravel y utilizar un dashboard de FilamentPHP para cargar los datos","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Instalación y configuración inicial","slug":"instalacion-y-configuracion-inicial","link":"#instalacion-y-configuracion-inicial","children":[{"level":3,"title":"Instalación de FilamentPHP","slug":"instalacion-de-filamentphp","link":"#instalacion-de-filamentphp","children":[]},{"level":3,"title":"Configuración","slug":"configuracion","link":"#configuracion","children":[]},{"level":3,"title":"Ejecutar el servidor de desarrollo","slug":"ejecutar-el-servidor-de-desarrollo","link":"#ejecutar-el-servidor-de-desarrollo","children":[]}]},{"level":2,"title":"Estructura de directorios","slug":"estructura-de-directorios","link":"#estructura-de-directorios","children":[]},{"level":2,"title":"Autenticación","slug":"autenticacion","link":"#autenticacion","children":[]},{"level":2,"title":"Rutas y controladores","slug":"rutas-y-controladores","link":"#rutas-y-controladores","children":[]},{"level":2,"title":"Paquetes adicionales","slug":"paquetes-adicionales","link":"#paquetes-adicionales","children":[]},{"level":2,"title":"Pruebas y documentación","slug":"pruebas-y-documentacion","link":"#pruebas-y-documentacion","children":[]},{"level":2,"title":"Despliegue","slug":"despliegue","link":"#despliegue","children":[]},{"level":2,"title":"Seguridad y mantenimiento","slug":"seguridad-y-mantenimiento","link":"#seguridad-y-mantenimiento","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"laravel/crear-api.md"}');export{k as comp,x as data};

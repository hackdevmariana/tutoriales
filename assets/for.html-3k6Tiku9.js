import{_ as n,o as s,c as a,d as e}from"./app-wmO9EYOZ.js";const o={},t=e(`<h1 id="bucles-for-en-r" tabindex="-1"><a class="header-anchor" href="#bucles-for-en-r"><span>Bucles for en R</span></a></h1><p>Los bucles for en R son una estructura de control que permite repetir un bloque de código para cada elemento en una secuencia o colección, como vectores, listas o matrices.</p><p>La sintaxis básica de un bucle for en R es la siguiente:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">in</span> secuencia<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment"># Código a ejecutar</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>variable: Es el nombre que le damos al elemento actual en la secuencia durante cada iteración del bucle.</p></li><li><p>secuencia: Es la colección de elementos que queremos recorrer. Puede ser un vector, una lista, un rango de números, etc.</p></li></ul><p>Ejemplo Simple de un bucle for que imprime los números del 1 al 5:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  print<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos usar un bucle for para iterar sobre los elementos de un vector o una lista:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>vector <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>valor <span class="token keyword">in</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  print<span class="token punctuation">(</span>valor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Con una lista:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code>lista <span class="token operator">&lt;-</span> list<span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>elemento <span class="token keyword">in</span> lista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  print<span class="token punctuation">(</span>elemento<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dentro de un bucle <code>for</code>, podemos usar <code>if</code>, <code>else</code>, <code>break</code> y <code>next</code> para controlar el flujo de ejecución:</p><ul><li><p><strong>if</strong> y <strong>else</strong>: Permiten ejecutar código condicionalmente.</p></li><li><p><strong>break</strong>: Termina la ejecución del bucle inmediatamente.</p></li><li><p><strong>next</strong>: Salta el resto del código en la iteración actual y pasa a la siguiente.</p></li></ul><p>Ejemplo con control de flujo:</p><div class="language-r line-numbers-mode" data-ext="r" data-title="r"><pre class="language-r"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span> <span class="token comment"># Termina el bucle si i es igual a 5</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token percent-operator operator">%%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">next</span> <span class="token comment"># Salta los números pares</span>
  <span class="token punctuation">}</span>
  print<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># Imprime solo los números impares menores que 5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>También podemos anidar bucles <code>for</code> dentro de otros bucles <code>for</code> para trabajar con estructuras de datos más complejas, como matrices o listas de listas.</p><h2 id="consejos" tabindex="-1"><a class="header-anchor" href="#consejos"><span>Consejos</span></a></h2><ul><li><p>Evitaremos bucles innecesarios: R es un lenguaje vectorizado, lo que significa que muchas operaciones pueden realizarse sin bucles explícitos. Mejor, utilizaremos funciones vectorizadas cuando sea posible.</p></li><li><p>Preasignación: Para mejorar el rendimiento, preasignaremos el espacio para objetos que se modificarán o crearán dentro del bucle.</p></li></ul>`,18),p=[t];function c(l,i){return s(),a("div",null,p)}const u=n(o,[["render",c],["__file","for.html.vue"]]),d=JSON.parse('{"path":"/r/for.html","title":"Bucles for en R","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Consejos","slug":"consejos","link":"#consejos","children":[]}],"git":{"updatedTime":1715763058000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"r/for.md"}');export{u as comp,d as data};

import{_ as e,r as t,o,c as p,a as n,e as a,b as i,w as c,d as l}from"./app-DiViDTCO.js";const r={},u=n("h1",{id:"escribir-en-una-imagen-existente",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#escribir-en-una-imagen-existente"},[n("span",null,"Escribir en una imagen existente")])],-1),d=l(`<p>Para escibir sobre una imagen, crearemos un objeto con <code>imagecreatefrompng()</code>. Para seleccionar el color, lo haremos con <code>imagecolorallocate()</code>. Si queremos escribir con las letras negras, usaremos el color <code>0, 0, 0</code>.</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$rutaImagen</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;path/to/image.png&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$rutaFuente</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;path/to/font.ttf&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$imagen</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$rutaImagen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$imagen</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$tamanio</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token variable">$angulo</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token variable">$texto</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Hola, mundo&#39;</span><span class="token punctuation">;</span>

<span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$imagen</span><span class="token punctuation">,</span> <span class="token variable">$tamanio</span><span class="token punctuation">,</span> <span class="token variable">$angulo</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token variable">$rutaFuente</span><span class="token punctuation">,</span> <span class="token variable">$texto</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content-Type: image/png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$imagen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$imagen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para mostrar la imagen usaremos <code>header(&#39;Content-Type: image/png&#39;)</code> e <code>imagepng($imagen)</code>, que envían la imagen modificada al navegador.</p><p>Con <code>imagedestroy($imagen)</code> liberaremos la memoria utilizada por la imagen.</p>`,4);function m(k,b){const s=t("RouteLink");return o(),p("div",null,[u,n("p",null,[a("Para escribir texto sobre una imagen existente usando PHP, podemos utilizar la librería GD. Primero, "),i(s,{to:"/php/imagenes/comprobar-gd.html"},{default:c(()=>[a("nos debemos asegurar")]),_:1}),a(" de tener la librería GD habilitada en el servidor PHP.")]),d])}const g=e(r,[["render",m],["__file","escribir-imagen-existente.html.vue"]]),h=JSON.parse('{"path":"/php/imagenes/escribir-imagen-existente.html","title":"Escribir en una imagen existente","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"php/imagenes/escribir-imagen-existente.md"}');export{g as comp,h as data};

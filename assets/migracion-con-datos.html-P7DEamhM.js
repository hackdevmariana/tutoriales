import{_ as n,o as s,c as a,d as e}from"./app-Baf9JFw4.js";const t={},o=e(`<h1 id="migraciones-en-laravel-con-datos-predeterminados" tabindex="-1"><a class="header-anchor" href="#migraciones-en-laravel-con-datos-predeterminados"><span>Migraciones en Laravel con datos predeterminados</span></a></h1><p>A veces nos encontramos con que tenemos que rellenar una base de datos con información antes de llevarla a producción. Muchas veces, esos datos son masivos y es más eficiente incluirlos a la hora de hacer el modelo.</p><p>Tenemos dos opciones para subir esa información a la base de datos.</p><p>Supongamos que queremos añadir datos que se mantendrán constantes en el tiempo, como las provincias de España.</p><h2 id="migraciones-con-datos-predeterminados" tabindex="-1"><a class="header-anchor" href="#migraciones-con-datos-predeterminados"><span>Migraciones con datos predeterminados</span></a></h2><p>Podemos crear una migración que, además de definir la estructura de la tabla, también inserte los datos predeterminados. Esto es útil para datos que no cambiarán con el tiempo o que son necesarios para el funcionamiento inicial de la aplicación.</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;provincias&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;nombre&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Otros campos necesarios...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Insertamos los datos predeterminados</span>
<span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;provincias&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;nombre&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;A Coruña&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;nombre&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Álava&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ... Resto de provincias</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="seeders-para-desarrollo-y-produccion" tabindex="-1"><a class="header-anchor" href="#seeders-para-desarrollo-y-produccion"><span>Seeders para desarrollo y producción</span></a></h2><p>Aunque generalmente se recomienda no ejecutar <code>seeders</code> en un entorno de producción, hay casos en los que puede ser apropiado, especialmente si se trata de datos que no cambian y son esenciales para la aplicación. Si decidimos usar <code>seeders</code>, nos aseguraremos de que su ejecución no afecte los datos existentes y que solo se ejecuten una vez.</p><p>Ejemplo de un seeder para provincias de España:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Seeder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ProvinciasTableSeeder</span> <span class="token keyword">extends</span> <span class="token class-name">Seeder</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$provincias</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#39;A Coruña&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Álava&#39;</span><span class="token punctuation">,</span> <span class="token comment">// ... Resto de provincias</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$provincias</span> <span class="token keyword">as</span> <span class="token variable">$provincia</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;provincias&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;nombre&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$provincia</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para ejecutar este <code>seeder</code>, podemos usar el comando <code>php artisan db:seed</code> con una bandera especial para indicar que se trata de una operación de producción:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>php artisan db<span class="token punctuation">:</span>seed <span class="token operator">--</span><span class="token keyword">class</span><span class="token operator">=</span>ProvinciasTableSeeder <span class="token operator">--</span>force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="insercion-masiva-y-evolutiva" tabindex="-1"><a class="header-anchor" href="#insercion-masiva-y-evolutiva"><span>Inserción masiva y evolutiva</span></a></h2><p>Supongamos que estamos haciendo una inserción evolutiva, como frases del Quijote. En una fase, seleccionamos una serie de frases, luego, otras frases y así, a medida que vamos leyendo el libro, vamos seleccionando las frases y añadiéndolas en migraciones.</p><p>Para asegurarnos de que no se añaden duplicados, podemos comprobar si la entrada ya existe en la base de datos antes de insertarla.</p><p>Aquí hay un ejemplo de cómo podríamos hacerlo en una migración:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DB</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Blueprint</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InsertQuijotePhrases</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>
<span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
* Run the migrations.
*
* <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">// Frases del Quijote a añadir</span>
<span class="token variable">$phrases</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token string double-quoted-string">&quot;En un lugar de la Mancha, de cuyo nombre no quiero acordarme...&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// Otras frases seleccionadas</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$phrases</span> <span class="token keyword">as</span> <span class="token variable">$phrase</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// Comprobar si la frase ya existe</span>
<span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;frases_quijote&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;frase&#39;</span><span class="token punctuation">,</span> <span class="token variable">$phrase</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Si no existe, la insertamos</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$exists</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;frases_quijote&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;frase&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$phrase</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* Reverse the migrations.
*
* <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">// Opcional: Código para revertir la migración si es necesario</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Este script de migración itera sobre un array de frases y comprueba si cada una ya existe en la tabla <code>frases_quijote</code>. Si la frase no existe, la inserta.</p><p>De esta manera, podemos ejecutar múltiples migraciones a lo largo del tiempo, añadiendo nuevas frases sin preocuparnos por los duplicados.</p>`,20),p=[o];function i(c,l){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","migracion-con-datos.html.vue"]]),d=JSON.parse('{"path":"/laravel/migracion-con-datos.html","title":"Migraciones en Laravel con datos predeterminados","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Migraciones con datos predeterminados","slug":"migraciones-con-datos-predeterminados","link":"#migraciones-con-datos-predeterminados","children":[]},{"level":2,"title":"Seeders para desarrollo y producción","slug":"seeders-para-desarrollo-y-produccion","link":"#seeders-para-desarrollo-y-produccion","children":[]},{"level":2,"title":"Inserción masiva y evolutiva","slug":"insercion-masiva-y-evolutiva","link":"#insercion-masiva-y-evolutiva","children":[]}],"git":{"updatedTime":1715036632000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":3}]},"filePathRelative":"laravel/migracion-con-datos.md"}');export{u as comp,d as data};

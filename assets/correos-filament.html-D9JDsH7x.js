import{_ as e,r as o,o as t,c as p,a as n,e as a,b as l,d as c}from"./app-B-VpPBey.js";const i={},r=n("h1",{id:"envio-de-correos-en-filamentphp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#envio-de-correos-en-filamentphp"},[n("span",null,"Envío de correos en FilamentPHP")])],-1),u={href:"https://www.mailgun.com/es/",target:"_blank",rel:"noopener noreferrer"},d=c(`<p>Una vez conseguidos los credenciales, necesitamos configurar Mailgun en la aplicación Laravel. Abrimos el archivo <code>.env</code> y configuramos las siguientes variables de entorno con las credenciales proporcionadas por Mailgun:</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>MAIL_MAILER=smtp
MAIL_HOST=smtp.mailgun.org
MAIL_PORT=587
MAIL_USERNAME=your-mailgun-smtp-username
MAIL_PASSWORD=your-mailgun-smtp-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your-email-address
MAIL_FROM_NAME=&quot;\${APP_NAME}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Una vez configurado <code>.env</code>, creamos una <code>Mailable</code>. Una Mailable es una clase que representa un correo electrónico en Laravel. Podemos generar una Mailable utilizando el comando Artisan:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>php artisan make<span class="token punctuation">:</span>mail AlertMail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Esto creará una nueva clase <code>AlertMail</code> en el directorio <code>app/Mail</code>. Dentro de esta clase, podemos personalizar el contenido del correo electrónico que se enviará.</p><p>Luego, pasaremos a configurar la lógica de alerta en la aplicación, donde determinaremos el escenario en el que deseamos enviar una alerta por correo electrónico.</p><p>Por ejemplo, si deseamos enviar una alerta cuando un evento ocurra, podemos agregar la lógica de alerta en el controlador o en el servicio correspondiente:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Mail<span class="token punctuation">\\</span>AlertMail</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Mail</span><span class="token punctuation">;</span>

<span class="token comment">// Dentro de un método de un controlador o servicio</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Lógica para determinar cuándo enviar una alerta</span>

    <span class="token comment">// Envío de la alerta por correo electrónico</span>
    <span class="token variable">$recipient</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;recipient@example.com&#39;</span><span class="token punctuation">;</span>
    <span class="token class-name static-context">Mail</span><span class="token operator">::</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token variable">$recipient</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AlertMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dentro de la clase <code>AlertMail</code>, podemos personalizar el contenido del correo electrónico y cualquier otro aspecto relacionado con el envío del correo. Por ejemplo:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Bus<span class="token punctuation">\\</span>Queueable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>ShouldQueue</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Mail<span class="token punctuation">\\</span>Mailable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>SerializesModels</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AlertMail</span> <span class="token keyword">extends</span> <span class="token class-name">Mailable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Queueable</span><span class="token punctuation">,</span> SerializesModels<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Build the message.
     *
     * <span class="token keyword">@return</span> $this
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mail.from.address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">-&gt;</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Alerta Importante&#39;</span><span class="token punctuation">)</span>
                    <span class="token operator">-&gt;</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;emails.alert&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>También podemos crear una vista (opcional), si deseamos personalizar el contenido del correo electrónico.</p><p>Utilizando una plantilla Blade, podemos crear una vista en el directorio <code>resources/views/emails</code>. Por ejemplo, creamos un archivo <code>alert.blade.php</code> con el contenido del correo electrónico.</p><p>Para probar el envío de correo electrónico, podemos llamar al método <code>sendAlert</code> que hemos creado anteriormente desde una ruta o un controlador en la aplicación y verificar si el correo electrónico se envía correctamente:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/send-alert&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Http\\Controllers\\YourController&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sendAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function k(m,v){const s=o("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[a("Para crear un servicio de alertas por correo en Laravel utilizando un servicio externo, como Mailgun, debemos, primero, crear una cuenta en "),n("a",u,[a("Mailgun"),l(s)]),a(".")]),d])}const g=e(i,[["render",k],["__file","correos-filament.html.vue"]]),h=JSON.parse('{"path":"/laravel/correos-filament.html","title":"Envío de correos en FilamentPHP","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"laravel/correos-filament.md"}');export{g as comp,h as data};

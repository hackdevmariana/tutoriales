import{_ as n,o as a,c as s,d as e}from"./app-CD-xz2fI.js";const o={},t=e(`<h1 id="cli-con-click" tabindex="-1"><a class="header-anchor" href="#cli-con-click"><span>CLI con click</span></a></h1><h2 id="instalacion" tabindex="-1"><a class="header-anchor" href="#instalacion"><span>Instalación</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> click
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="comando-sin-subcomandos" tabindex="-1"><a class="header-anchor" href="#comando-sin-subcomandos"><span>Comando sin subcomandos</span></a></h2><p>Es posible crear un CLI con <code>Click</code> que se ejecute directamente sin mostrar la ayuda al escribir el nombre del script.</p><p>Podemos hacer esto utilizando un comando principal que se ejecute automáticamente cuando no se proporciona un subcomando, al estilo de cualquier comando clásico de Unix, como <code>ls</code>, <code>cd</code> o <code>mkdir</code>.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> click

<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>group</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@cli<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">&#39;parametro&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">comando</span><span class="token punctuation">(</span>parametro<span class="token punctuation">)</span><span class="token punctuation">:</span>
    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Ejecutando comando con parámetro: </span><span class="token interpolation"><span class="token punctuation">{</span>parametro<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    cli<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para ejecutarlo, escribiríamos en la consola:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python3 script.py valor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="aumentar-la-facilidad-de-uso" tabindex="-1"><a class="header-anchor" href="#aumentar-la-facilidad-de-uso"><span>Aumentar la facilidad de uso</span></a></h2><p>Si queremos no tener que escribir python3 en sistemas Unix, podemos añadir al principio del script el shebang <code>#!/usr/bin/env python3</code>:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> click

<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>group</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@cli<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">&#39;parametro&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">comando</span><span class="token punctuation">(</span>parametro<span class="token punctuation">)</span><span class="token punctuation">:</span>
    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Ejecutando comando con parámetro: </span><span class="token interpolation"><span class="token punctuation">{</span>parametro<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    cli<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>También podemos usar la extensión .py para facilitar el desarrollo y que el editor reconozca automáticamente el lenguaje que estamos usando y para usarlo nos queremos ahorrar la extensión, podemos renombrar el fichero:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> script.py script
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Podemos saber los directorios donde se almacenan los ficheros ejecutables tanto del sistema como del usuario con:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Podemos copiarlo en uno de esos directorios o crear un directorio y añadirlo al PATH escribiendo en el fichero <code>~/.profile</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token environment constant">$HOME</span>/.local/bin/mi-proyecto&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.local/bin/mi-proyecto:<span class="token environment constant">$PATH</span>&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Y activarlo con:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>De esta manera, podemos ejecutarlo simplemente con:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>script valor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),i=[t];function c(l,p){return a(),s("div",null,i)}const r=n(o,[["render",c],["__file","click.html.vue"]]),u=JSON.parse('{"path":"/python/click.html","title":"CLI con click","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Instalación","slug":"instalacion","link":"#instalacion","children":[]},{"level":2,"title":"Comando sin subcomandos","slug":"comando-sin-subcomandos","link":"#comando-sin-subcomandos","children":[]},{"level":2,"title":"Aumentar la facilidad de uso","slug":"aumentar-la-facilidad-de-uso","link":"#aumentar-la-facilidad-de-uso","children":[]}],"git":{"updatedTime":1708781705000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":3}]},"filePathRelative":"python/click.md"}');export{r as comp,u as data};

import{_ as e,o as a,c as s,d as n}from"./app-B31uEirb.js";const o={},i=n(`<h1 id="generar-documentacion-a-partir-de-los-docstrings-con-sphinx" tabindex="-1"><a class="header-anchor" href="#generar-documentacion-a-partir-de-los-docstrings-con-sphinx"><span>Generar documentación a partir de los docstrings con Sphinx</span></a></h1><h2 id="instalacion" tabindex="-1"><a class="header-anchor" href="#instalacion"><span>Instalación</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> sphinx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uso" tabindex="-1"><a class="header-anchor" href="#uso"><span>Uso</span></a></h2><p>Creamos una carpeta para la documentación, por ejemplo <code>docs</code>, y entramos en ella.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> docs
<span class="token builtin class-name">cd</span> docs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ejecutamos el comando</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sphinx-quickstart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>para iniciar el proceso de configuración de Sphinx. Este comando realiza algunas preguntas sobre el proyecto, como el nombre, el autor, el lenguaje, el formato de salida, etc.</p><p>Podemos aceptar los valores por defecto o personalizarlos según las preferencias del desarroador.</p><p>Editamos el fichero <code>conf.py</code> que se ha generado en la carpeta <code>docs</code>. Este fichero contiene la configuración de Sphinx para el proyecto. Debemos asegurarnos de que la variable extensions incluya el valor <code>sphinx.ext.autodoc</code>, que es el que permite extraer los docstrings del código.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>extensions <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;sphinx.ext.autodoc&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Añadimos la ruta del código fuente a la variable <code>sys.path</code> en el fichero <code>conf.py</code>. Esto le permitirá a Sphinx encontrar e importar los módulos y clases. Por ejemplo, si el código está en la carpeta <code>src</code> del mismo nivel que la carpeta <code>docs</code>, podemos hacer lo siguiente:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;../src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creamos un fichero <code>.rst</code> para cada módulo o clase que quieras documentar. Podemos usar el comando:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sphinx-apidoc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>para generar estos ficheros automáticamente a partir del código. Por ejemplo, para generar los ficheros <code>.rst</code> para todos los módulos y clases en la carpeta <code>src</code>, podemos ejecutar el siguiente comando desde la carpeta docs:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sphinx-apidoc <span class="token parameter variable">-o</span> <span class="token builtin class-name">.</span> <span class="token punctuation">..</span>/src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Editamos los ficheros <code>.rst</code> que se han generado para incluir los docstrings de tus módulos y clases. Para ello, debemos usar la directiva <code>.. automodule::</code> o <code>.. autoclass::</code> seguida del nombre del módulo o clase que queramos documentar. Por ejemplo, si tenemos un fichero <code>mi_modulo.py</code> que contiene una clase <code>MiClase</code>, podemos usar el siguiente código en el fichero <code>mi_modulo.rst</code>:</p><div class="language-rst line-numbers-mode" data-ext="rst" data-title="rst"><pre class="language-rst"><code>mi_modulo
=========

.. automodule:: mi_modulo
:members:

MiClase
-------

.. autoclass:: mi_modulo.MiClase
:members:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ejecutamos el comando</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>para generar la documentación en formato HTML. Esto creará una carpeta <code>_build</code> con los ficheros HTML de la documentación, con un fichero <code>index.html</code> como página raíz.</p>`,23),d=[i];function c(l,t){return a(),s("div",null,d)}const p=e(o,[["render",c],["__file","sphinx.html.vue"]]),u=JSON.parse('{"path":"/python/sphinx.html","title":"Generar documentación a partir de los docstrings con Sphinx","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Instalación","slug":"instalacion","link":"#instalacion","children":[]},{"level":2,"title":"Uso","slug":"uso","link":"#uso","children":[]}],"git":{"updatedTime":1709562057000,"contributors":[{"name":"fernando","email":"fernando@juandemariana.org","commits":1}]},"filePathRelative":"python/sphinx.md"}');export{p as comp,u as data};

import{_ as a,o as s,c as n,d as e}from"./app-BcsswNq0.js";const o={},t=e(`<h1 id="consultas-a-un-modelo-indicando-una-condicion-en-laravel" tabindex="-1"><a class="header-anchor" href="#consultas-a-un-modelo-indicando-una-condicion-en-laravel"><span>Consultas a un modelo indicando una condición en Laravel</span></a></h1><p>En Laravel, para realizar una búsqueda con <code>Eloquent</code> y obtener todos los resultados que cumplan con una condición, podemos usar los métodos <code>where</code>, <code>get</code>.</p><h2 id="busqueda-simple-con-where-y-get" tabindex="-1"><a class="header-anchor" href="#busqueda-simple-con-where-y-get"><span>Búsqueda simple con where y get</span></a></h2><p>Para obtener todos los registros que cumplan con una condición específica, podemos utilizar el método <code>where</code> de la clase donde realizemos la búsqueda, para establecer la condición y luego llamar a <code>get</code> para recuperar los resultados:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token class-name static-context">ClothingItem</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token variable">$condition</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Podemos hacer una búsqueda en el que la cadena a buscar sea exactamente la indicada o indicar con <code>like</code> que queremos como respuesta los campos que contengan una determinada subcadena (en este caso, hello):</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token class-name static-context">ClothingItem</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%hello%&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Los campos que comiencen por una determinada subcadena (en este caso, hello):</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token class-name static-context">ClothingItem</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;hello%&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O los campos que acaben por una determinada subcadena (en este caso, hello):</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token class-name static-context">ClothingItem</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%hello&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>El operador <code>like</code> se utiliza para búsquedas parciales. El método <code>get()</code> recupera todos los registros que cumplan con la condición especificada.</p><h2 id="resultado-de-la-consulta" tabindex="-1"><a class="header-anchor" href="#resultado-de-la-consulta"><span>Resultado de la consulta</span></a></h2><p>El código anterior almacena los resultados en <code>$items</code> como una colección de objetos <code>ClothingItem</code> (o el modelo que usemos). En <code>Laravel</code>, la clase <code>Collection</code> es un envoltorio más avanzado que un simple array, ya que las colecciones de <code>Laravel</code> proporcionan una variedad de métodos útiles para trabajar con los datos, como filtrado, mapeo, reducción, etc.</p><p>En este ejemplo, <code>$items</code> es una instancia de la clase <code>Illuminate\\Database\\Eloquent\\Collection</code>.</p><p>No es un array simple, aunque se comporta de manera similar en muchos aspectos. Cada elemento de la colección es un objeto de la clase <code>ClothingItem</code> (o el modelo que usemos) que representa un registro en la base de datos que cumple con la condición where.</p><h2 id="visualizacion-de-los-resultados" tabindex="-1"><a class="header-anchor" href="#visualizacion-de-los-resultados"><span>Visualización de los resultados</span></a></h2><p>Para visualizar los datos almacenados en <code>$items</code>, podemos usar varias técnicas:</p><p><strong>Usar <code>dd()</code> para depuración</strong></p><p><code>dd()</code> (dump and die) es una forma rápida de ver los datos y detener la ejecución del script:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Convertir a array</strong></p><p>Podemos convertir la colección a un array para una visualización más precisa de los datos:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$arrayItems</span> <span class="token operator">=</span> <span class="token variable">$items</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$arrayItems</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>O, más compacto:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Iterar sobre la colección</strong></p><p>Otra forma de mostrar los datos es iterar sobre ellos desde PHP:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Convertir a JSON</strong></p><p>O, convertirlo a un JSON, por ejemplo, para depurar desde una API:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$jsonItems</span> <span class="token operator">=</span> <span class="token variable">$items</span><span class="token operator">-&gt;</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$jsonItems</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,32),p=[t];function l(c,i){return s(),n("div",null,p)}const r=a(o,[["render",l],["__file","where.html.vue"]]),u=JSON.parse('{"path":"/laravel/eloquent/where.html","title":"Consultas a un modelo indicando una condición en Laravel","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Búsqueda simple con where y get","slug":"busqueda-simple-con-where-y-get","link":"#busqueda-simple-con-where-y-get","children":[]},{"level":2,"title":"Resultado de la consulta","slug":"resultado-de-la-consulta","link":"#resultado-de-la-consulta","children":[]},{"level":2,"title":"Visualización de los resultados","slug":"visualizacion-de-los-resultados","link":"#visualizacion-de-los-resultados","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"laravel/eloquent/where.md"}');export{r as comp,u as data};
